generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

// 用户账号
model accounts {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String
  status   String // ACTIVE, DISABLED, DELETED

  // 关联关系
  account_roles account_roles[] // 直接分配的角色
  group_members group_members[] // 所属用户组
  sessions      sessions[] // 登录会话

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()
}

// 用户组
model groups {
  id          String  @id @default(cuid())
  name        String  @unique
  code        String  @unique // 用户组编码
  description String?
  type        String // PERMANENT, TEMPORARY 永久组或临时组

  // 用户组层级
  parent    groups?  @relation("GroupHierarchy", fields: [parent_id], references: [id])
  parent_id String?
  children  groups[] @relation("GroupHierarchy")

  // 关联关系
  members     group_members[] // 组成员
  group_roles group_roles[] // 组角色

  created_at DateTime  @default(now()) @db.Timestamp()
  updated_at DateTime  @updatedAt @db.Timestamp()
  expires_at DateTime? @db.Timestamp() // 临时组可以设置过期时间
}

// 角色
model roles {
  id          String  @id @default(cuid())
  name        String  @unique
  code        String  @unique // 角色编码
  description String?
  type        String // SYSTEM, CUSTOM 系统角色或自定义角色

  // 角色分配关系
  account_roles account_roles[] // 被分配到的用户
  group_roles   group_roles[] // 被分配到的用户组

  // 角色权限
  permissions role_permissions[] // 角色拥有的权限

  // 角色继承关系
  parent    roles?  @relation("RoleHierarchy", fields: [parent_id], references: [id])
  parent_id String?
  children  roles[] @relation("RoleHierarchy")

  // 角色约束
  exclusive_with role_exclusions[]    @relation("ExclusiveRoleA")
  excluded_by    role_exclusions[]    @relation("ExclusiveRoleB")
  max_members    role_limits? // 角色成员数限制
  prerequisites  role_prerequisites[] @relation("RequiredRole")
  required_for   role_prerequisites[] @relation("DependentRole")

  // 会话激活记录
  active_sessions session_roles[]

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()
}

// 权限
model permissions {
  id          String  @id @default(cuid())
  name        String  @unique
  code        String  @unique // 权限编码
  description String?
  type        String // API, MENU, OPERATION, DATA 等

  // 关联关系
  roles role_permissions[] // 拥有该权限的角色

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()
}

// ============ 关联关系表 ============

// 用户组成员关系
model group_members {
  id         String    @id @default(cuid())
  group      groups    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String
  account    accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id String
  joined_at  DateTime  @default(now())
  expires_at DateTime? // 成员可以设置过期时间

  @@unique([group_id, account_id])
}

// 账户-角色关联
model account_roles {
  id         String    @id @default(cuid())
  account    accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id String
  role       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    String
  granted_at DateTime  @default(now())
  granted_by String // 授权人ID
  expires_at DateTime? // 可选的过期时间

  @@unique([account_id, role_id])
}

// 用户组-角色关联
model group_roles {
  id         String    @id @default(cuid())
  group      groups    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String
  role       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    String
  granted_at DateTime  @default(now())
  grantedBy  String // 授权人ID
  expiresAt  DateTime? // 角色授权可以设置过期时间

  @@unique([group_id, role_id])
}

// 角色-权限关联
model role_permissions {
  id            String      @id @default(cuid())
  role          roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id       String
  permission    permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  permission_id String
  granted_at    DateTime    @default(now())

  @@unique([role_id, permission_id])
}

// ============ 约束相关表 ============

// 角色互斥关系
model role_exclusions {
  id         String   @id @default(cuid())
  role_a     roles    @relation("ExclusiveRoleA", fields: [role_a_id], references: [id], onDelete: Cascade)
  role_a_id  String
  role_b     roles    @relation("ExclusiveRoleB", fields: [role_b_id], references: [id], onDelete: Cascade)
  role_b_id  String
  is_runtime Boolean  @default(false) // 运行时互斥标记
  created_at DateTime @default(now())

  @@unique([role_a_id, role_b_id])
}

// 角色成员数限制
model role_limits {
  id          String   @id @default(cuid())
  role        roles    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id     String   @unique
  max_members Int // 最大成员数
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// 角色前置要求
model role_prerequisites {
  id                String   @id @default(cuid())
  dependent_role    roles    @relation("DependentRole", fields: [dependent_role_id], references: [id], onDelete: Cascade)
  dependent_role_id String
  required_role     roles    @relation("RequiredRole", fields: [required_role_id], references: [id], onDelete: Cascade)
  required_role_id  String
  created_at        DateTime @default(now())

  @@unique([dependent_role_id, required_role_id])
}

// ============ 会话相关表 ============

// 用户会话
model sessions {
  id             String          @id @default(cuid())
  account        accounts        @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id     String
  token          String          @unique
  active_roles   session_roles[] // 当前激活的角色
  expires_at     DateTime
  created_at     DateTime        @default(now())
  last_access_at DateTime        @updatedAt
}

// 会话中激活的角色
model session_roles {
  id           String   @id @default(cuid())
  session      sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
  session_id   String
  role         roles    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id      String
  activated_at DateTime @default(now())

  @@unique([session_id, role_id])
}
